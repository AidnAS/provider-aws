/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DNSSECConfigObservation struct {

	// The ARN for a configuration for DNSSEC validation.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// The ID for a configuration for DNSSEC validation.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The owner account ID of the virtual private cloud  for a configuration for DNSSEC validation.
	OwnerID *string `json:"ownerId,omitempty" tf:"owner_id,omitempty"`

	// The validation status for a DNSSEC configuration. The status can be one of the following: ENABLING, ENABLED, DISABLING and DISABLED.
	ValidationStatus *string `json:"validationStatus,omitempty" tf:"validation_status,omitempty"`
}

type DNSSECConfigParameters struct {

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// The ID of the virtual private cloud  that you're updating the DNSSEC validation status for.
	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-aws/apis/ec2/v1beta1.VPC
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceIDRef *v1.Reference `json:"resourceIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceIDSelector *v1.Selector `json:"resourceIdSelector,omitempty" tf:"-"`
}

// DNSSECConfigSpec defines the desired state of DNSSECConfig
type DNSSECConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DNSSECConfigParameters `json:"forProvider"`
}

// DNSSECConfigStatus defines the observed state of DNSSECConfig.
type DNSSECConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DNSSECConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DNSSECConfig is the Schema for the DNSSECConfigs API. Provides a Route 53 Resolver DNSSEC config resource.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DNSSECConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DNSSECConfigSpec   `json:"spec"`
	Status            DNSSECConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DNSSECConfigList contains a list of DNSSECConfigs
type DNSSECConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DNSSECConfig `json:"items"`
}

// Repository type metadata.
var (
	DNSSECConfig_Kind             = "DNSSECConfig"
	DNSSECConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DNSSECConfig_Kind}.String()
	DNSSECConfig_KindAPIVersion   = DNSSECConfig_Kind + "." + CRDGroupVersion.String()
	DNSSECConfig_GroupVersionKind = CRDGroupVersion.WithKind(DNSSECConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&DNSSECConfig{}, &DNSSECConfigList{})
}
