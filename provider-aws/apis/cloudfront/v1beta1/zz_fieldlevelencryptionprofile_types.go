/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EncryptionEntitiesItemsObservation struct {
}

type EncryptionEntitiesItemsParameters struct {

	// +kubebuilder:validation:Required
	FieldPatterns []FieldPatternsParameters `json:"fieldPatterns" tf:"field_patterns,omitempty"`

	// +kubebuilder:validation:Required
	ProviderID *string `json:"providerId" tf:"provider_id,omitempty"`

	// +kubebuilder:validation:Required
	PublicKeyID *string `json:"publicKeyId" tf:"public_key_id,omitempty"`
}

type EncryptionEntitiesObservation struct {
}

type EncryptionEntitiesParameters struct {

	// +kubebuilder:validation:Optional
	Items []EncryptionEntitiesItemsParameters `json:"items,omitempty" tf:"items,omitempty"`
}

type FieldLevelEncryptionProfileObservation struct {
	CallerReference *string `json:"callerReference,omitempty" tf:"caller_reference,omitempty"`

	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FieldLevelEncryptionProfileParameters struct {

	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// +kubebuilder:validation:Required
	EncryptionEntities []EncryptionEntitiesParameters `json:"encryptionEntities" tf:"encryption_entities,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

type FieldPatternsObservation struct {
}

type FieldPatternsParameters struct {

	// +kubebuilder:validation:Optional
	Items []*string `json:"items,omitempty" tf:"items,omitempty"`
}

// FieldLevelEncryptionProfileSpec defines the desired state of FieldLevelEncryptionProfile
type FieldLevelEncryptionProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FieldLevelEncryptionProfileParameters `json:"forProvider"`
}

// FieldLevelEncryptionProfileStatus defines the observed state of FieldLevelEncryptionProfile.
type FieldLevelEncryptionProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FieldLevelEncryptionProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FieldLevelEncryptionProfile is the Schema for the FieldLevelEncryptionProfiles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type FieldLevelEncryptionProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FieldLevelEncryptionProfileSpec   `json:"spec"`
	Status            FieldLevelEncryptionProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FieldLevelEncryptionProfileList contains a list of FieldLevelEncryptionProfiles
type FieldLevelEncryptionProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FieldLevelEncryptionProfile `json:"items"`
}

// Repository type metadata.
var (
	FieldLevelEncryptionProfile_Kind             = "FieldLevelEncryptionProfile"
	FieldLevelEncryptionProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FieldLevelEncryptionProfile_Kind}.String()
	FieldLevelEncryptionProfile_KindAPIVersion   = FieldLevelEncryptionProfile_Kind + "." + CRDGroupVersion.String()
	FieldLevelEncryptionProfile_GroupVersionKind = CRDGroupVersion.WithKind(FieldLevelEncryptionProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&FieldLevelEncryptionProfile{}, &FieldLevelEncryptionProfileList{})
}
