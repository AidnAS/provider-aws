/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionObservation struct {
}

type ConditionParameters struct {

	// +kubebuilder:validation:Optional
	StringEquals []StringEqualsParameters `json:"stringEquals,omitempty" tf:"string_equals,omitempty"`

	// +kubebuilder:validation:Optional
	StringLike []StringLikeParameters `json:"stringLike,omitempty" tf:"string_like,omitempty"`

	// +kubebuilder:validation:Optional
	StringNotEquals []StringNotEqualsParameters `json:"stringNotEquals,omitempty" tf:"string_not_equals,omitempty"`

	// +kubebuilder:validation:Optional
	StringNotLike []StringNotLikeParameters `json:"stringNotLike,omitempty" tf:"string_not_like,omitempty"`
}

type SelectionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SelectionParameters struct {

	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/official-providers/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	IAMRoleArn *string `json:"iamRoleArn,omitempty" tf:"iam_role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	IAMRoleArnRef *v1.Reference `json:"iamRoleArnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	IAMRoleArnSelector *v1.Selector `json:"iamRoleArnSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NotResources []*string `json:"notResources,omitempty" tf:"not_resources,omitempty"`

	// +crossplane:generate:reference:type=Plan
	// +kubebuilder:validation:Optional
	PlanID *string `json:"planId,omitempty" tf:"plan_id,omitempty"`

	// +kubebuilder:validation:Optional
	PlanIDRef *v1.Reference `json:"planIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PlanIDSelector *v1.Selector `json:"planIdSelector,omitempty" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Resources []*string `json:"resources,omitempty" tf:"resources,omitempty"`

	// +kubebuilder:validation:Optional
	SelectionTag []SelectionTagParameters `json:"selectionTag,omitempty" tf:"selection_tag,omitempty"`
}

type SelectionTagObservation struct {
}

type SelectionTagParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type StringEqualsObservation struct {
}

type StringEqualsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type StringLikeObservation struct {
}

type StringLikeParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type StringNotEqualsObservation struct {
}

type StringNotEqualsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type StringNotLikeObservation struct {
}

type StringNotLikeParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// SelectionSpec defines the desired state of Selection
type SelectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SelectionParameters `json:"forProvider"`
}

// SelectionStatus defines the observed state of Selection.
type SelectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SelectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Selection is the Schema for the Selections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Selection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SelectionSpec   `json:"spec"`
	Status            SelectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SelectionList contains a list of Selections
type SelectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Selection `json:"items"`
}

// Repository type metadata.
var (
	Selection_Kind             = "Selection"
	Selection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Selection_Kind}.String()
	Selection_KindAPIVersion   = Selection_Kind + "." + CRDGroupVersion.String()
	Selection_GroupVersionKind = CRDGroupVersion.WithKind(Selection_Kind)
)

func init() {
	SchemeBuilder.Register(&Selection{}, &SelectionList{})
}
