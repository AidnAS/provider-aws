/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReportDeliveryChannelObservation struct {
}

type ReportDeliveryChannelParameters struct {

	// +kubebuilder:validation:Optional
	Formats []*string `json:"formats,omitempty" tf:"formats,omitempty"`

	// +kubebuilder:validation:Required
	S3BucketName *string `json:"s3BucketName" tf:"s3_bucket_name,omitempty"`

	// +kubebuilder:validation:Optional
	S3KeyPrefix *string `json:"s3KeyPrefix,omitempty" tf:"s3_key_prefix,omitempty"`
}

type ReportPlanObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	CreationTime *string `json:"creationTime,omitempty" tf:"creation_time,omitempty"`

	DeploymentStatus *string `json:"deploymentStatus,omitempty" tf:"deployment_status,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ReportPlanParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ReportDeliveryChannel []ReportDeliveryChannelParameters `json:"reportDeliveryChannel" tf:"report_delivery_channel,omitempty"`

	// +kubebuilder:validation:Required
	ReportSetting []ReportSettingParameters `json:"reportSetting" tf:"report_setting,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type ReportSettingObservation struct {
}

type ReportSettingParameters struct {

	// +kubebuilder:validation:Optional
	FrameworkArns []*string `json:"frameworkArns,omitempty" tf:"framework_arns,omitempty"`

	// +kubebuilder:validation:Optional
	NumberOfFrameworks *float64 `json:"numberOfFrameworks,omitempty" tf:"number_of_frameworks,omitempty"`

	// +kubebuilder:validation:Required
	ReportTemplate *string `json:"reportTemplate" tf:"report_template,omitempty"`
}

// ReportPlanSpec defines the desired state of ReportPlan
type ReportPlanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReportPlanParameters `json:"forProvider"`
}

// ReportPlanStatus defines the observed state of ReportPlan.
type ReportPlanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReportPlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ReportPlan is the Schema for the ReportPlans API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ReportPlan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReportPlanSpec   `json:"spec"`
	Status            ReportPlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReportPlanList contains a list of ReportPlans
type ReportPlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReportPlan `json:"items"`
}

// Repository type metadata.
var (
	ReportPlan_Kind             = "ReportPlan"
	ReportPlan_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ReportPlan_Kind}.String()
	ReportPlan_KindAPIVersion   = ReportPlan_Kind + "." + CRDGroupVersion.String()
	ReportPlan_GroupVersionKind = CRDGroupVersion.WithKind(ReportPlan_Kind)
)

func init() {
	SchemeBuilder.Register(&ReportPlan{}, &ReportPlanList{})
}
