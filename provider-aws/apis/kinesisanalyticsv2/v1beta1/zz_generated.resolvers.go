/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta11 "github.com/upbound/official-providers/provider-aws/apis/iam/v1beta1"
	v1beta1 "github.com/upbound/official-providers/provider-aws/apis/s3/v1beta1"
	common "github.com/upbound/official-providers/provider-aws/config/common"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Application.
func (mg *Application) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.ApplicationConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ApplicationConfiguration[i3].ApplicationCodeConfiguration); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.ApplicationConfiguration[i3].ApplicationCodeConfiguration[i4].CodeContent); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.ApplicationConfiguration[i3].ApplicationCodeConfiguration[i4].CodeContent[i5].S3ContentLocation); i6++ {
					rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
						CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationConfiguration[i3].ApplicationCodeConfiguration[i4].CodeContent[i5].S3ContentLocation[i6].BucketArn),
						Extract:      common.ARNExtractor(),
						Reference:    mg.Spec.ForProvider.ApplicationConfiguration[i3].ApplicationCodeConfiguration[i4].CodeContent[i5].S3ContentLocation[i6].BucketArnRef,
						Selector:     mg.Spec.ForProvider.ApplicationConfiguration[i3].ApplicationCodeConfiguration[i4].CodeContent[i5].S3ContentLocation[i6].BucketArnSelector,
						To: reference.To{
							List:    &v1beta1.BucketList{},
							Managed: &v1beta1.Bucket{},
						},
					})
					if err != nil {
						return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationConfiguration[i3].ApplicationCodeConfiguration[i4].CodeContent[i5].S3ContentLocation[i6].BucketArn")
					}
					mg.Spec.ForProvider.ApplicationConfiguration[i3].ApplicationCodeConfiguration[i4].CodeContent[i5].S3ContentLocation[i6].BucketArn = reference.ToPtrValue(rsp.ResolvedValue)
					mg.Spec.ForProvider.ApplicationConfiguration[i3].ApplicationCodeConfiguration[i4].CodeContent[i5].S3ContentLocation[i6].BucketArnRef = rsp.ResolvedReference

				}
			}
		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServiceExecutionRole),
		Extract:      common.ARNExtractor(),
		Reference:    mg.Spec.ForProvider.ServiceExecutionRoleRef,
		Selector:     mg.Spec.ForProvider.ServiceExecutionRoleSelector,
		To: reference.To{
			List:    &v1beta11.RoleList{},
			Managed: &v1beta11.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServiceExecutionRole")
	}
	mg.Spec.ForProvider.ServiceExecutionRole = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServiceExecutionRoleRef = rsp.ResolvedReference

	return nil
}
