/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterActivityStreamObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	KinesisStreamName *string `json:"kinesisStreamName,omitempty" tf:"kinesis_stream_name,omitempty"`
}

type ClusterActivityStreamParameters struct {

	// +kubebuilder:validation:Optional
	EngineNativeAuditFieldsIncluded *bool `json:"engineNativeAuditFieldsIncluded,omitempty" tf:"engine_native_audit_fields_included,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-aws/apis/kms/v1beta1.Key
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	KMSKeyIDRef *v1.Reference `json:"kmsKeyIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	KMSKeyIDSelector *v1.Selector `json:"kmsKeyIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	ResourceArn *string `json:"resourceArn" tf:"resource_arn,omitempty"`
}

// ClusterActivityStreamSpec defines the desired state of ClusterActivityStream
type ClusterActivityStreamSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterActivityStreamParameters `json:"forProvider"`
}

// ClusterActivityStreamStatus defines the observed state of ClusterActivityStream.
type ClusterActivityStreamStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterActivityStreamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterActivityStream is the Schema for the ClusterActivityStreams API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ClusterActivityStream struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterActivityStreamSpec   `json:"spec"`
	Status            ClusterActivityStreamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterActivityStreamList contains a list of ClusterActivityStreams
type ClusterActivityStreamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterActivityStream `json:"items"`
}

// Repository type metadata.
var (
	ClusterActivityStream_Kind             = "ClusterActivityStream"
	ClusterActivityStream_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterActivityStream_Kind}.String()
	ClusterActivityStream_KindAPIVersion   = ClusterActivityStream_Kind + "." + CRDGroupVersion.String()
	ClusterActivityStream_GroupVersionKind = CRDGroupVersion.WithKind(ClusterActivityStream_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterActivityStream{}, &ClusterActivityStreamList{})
}
