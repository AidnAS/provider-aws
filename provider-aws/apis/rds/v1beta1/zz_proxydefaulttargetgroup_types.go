/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectionPoolConfigObservation struct {
}

type ConnectionPoolConfigParameters struct {

	// +kubebuilder:validation:Optional
	ConnectionBorrowTimeout *float64 `json:"connectionBorrowTimeout,omitempty" tf:"connection_borrow_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	InitQuery *string `json:"initQuery,omitempty" tf:"init_query,omitempty"`

	// +kubebuilder:validation:Optional
	MaxConnectionsPercent *float64 `json:"maxConnectionsPercent,omitempty" tf:"max_connections_percent,omitempty"`

	// +kubebuilder:validation:Optional
	MaxIdleConnectionsPercent *float64 `json:"maxIdleConnectionsPercent,omitempty" tf:"max_idle_connections_percent,omitempty"`

	// +kubebuilder:validation:Optional
	SessionPinningFilters []*string `json:"sessionPinningFilters,omitempty" tf:"session_pinning_filters,omitempty"`
}

type ProxyDefaultTargetGroupObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ProxyDefaultTargetGroupParameters struct {

	// +kubebuilder:validation:Optional
	ConnectionPoolConfig []ConnectionPoolConfigParameters `json:"connectionPoolConfig,omitempty" tf:"connection_pool_config,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-aws/apis/rds/v1beta1.Proxy
	// +kubebuilder:validation:Optional
	DBProxyName *string `json:"dbProxyName,omitempty" tf:"db_proxy_name,omitempty"`

	// +kubebuilder:validation:Optional
	DBProxyNameRef *v1.Reference `json:"dbProxyNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DBProxyNameSelector *v1.Selector `json:"dbProxyNameSelector,omitempty" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// ProxyDefaultTargetGroupSpec defines the desired state of ProxyDefaultTargetGroup
type ProxyDefaultTargetGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProxyDefaultTargetGroupParameters `json:"forProvider"`
}

// ProxyDefaultTargetGroupStatus defines the observed state of ProxyDefaultTargetGroup.
type ProxyDefaultTargetGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProxyDefaultTargetGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProxyDefaultTargetGroup is the Schema for the ProxyDefaultTargetGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ProxyDefaultTargetGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProxyDefaultTargetGroupSpec   `json:"spec"`
	Status            ProxyDefaultTargetGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProxyDefaultTargetGroupList contains a list of ProxyDefaultTargetGroups
type ProxyDefaultTargetGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProxyDefaultTargetGroup `json:"items"`
}

// Repository type metadata.
var (
	ProxyDefaultTargetGroup_Kind             = "ProxyDefaultTargetGroup"
	ProxyDefaultTargetGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProxyDefaultTargetGroup_Kind}.String()
	ProxyDefaultTargetGroup_KindAPIVersion   = ProxyDefaultTargetGroup_Kind + "." + CRDGroupVersion.String()
	ProxyDefaultTargetGroup_GroupVersionKind = CRDGroupVersion.WithKind(ProxyDefaultTargetGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&ProxyDefaultTargetGroup{}, &ProxyDefaultTargetGroupList{})
}
