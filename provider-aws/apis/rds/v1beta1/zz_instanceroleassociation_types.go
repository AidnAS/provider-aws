/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstanceRoleAssociationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type InstanceRoleAssociationParameters struct {

	// +kubebuilder:validation:Required
	DBInstanceIdentifier *string `json:"dbInstanceIdentifier" tf:"db_instance_identifier,omitempty"`

	// +kubebuilder:validation:Required
	FeatureName *string `json:"featureName" tf:"feature_name,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-aws/apis/iam/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/upbound/official-providers/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	RoleArn *string `json:"roleArn,omitempty" tf:"role_arn,omitempty"`

	// +kubebuilder:validation:Optional
	RoleArnRef *v1.Reference `json:"roleArnRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	RoleArnSelector *v1.Selector `json:"roleArnSelector,omitempty" tf:"-"`
}

// InstanceRoleAssociationSpec defines the desired state of InstanceRoleAssociation
type InstanceRoleAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstanceRoleAssociationParameters `json:"forProvider"`
}

// InstanceRoleAssociationStatus defines the observed state of InstanceRoleAssociation.
type InstanceRoleAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstanceRoleAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceRoleAssociation is the Schema for the InstanceRoleAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type InstanceRoleAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstanceRoleAssociationSpec   `json:"spec"`
	Status            InstanceRoleAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstanceRoleAssociationList contains a list of InstanceRoleAssociations
type InstanceRoleAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstanceRoleAssociation `json:"items"`
}

// Repository type metadata.
var (
	InstanceRoleAssociation_Kind             = "InstanceRoleAssociation"
	InstanceRoleAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstanceRoleAssociation_Kind}.String()
	InstanceRoleAssociation_KindAPIVersion   = InstanceRoleAssociation_Kind + "." + CRDGroupVersion.String()
	InstanceRoleAssociation_GroupVersionKind = CRDGroupVersion.WithKind(InstanceRoleAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&InstanceRoleAssociation{}, &InstanceRoleAssociationList{})
}
