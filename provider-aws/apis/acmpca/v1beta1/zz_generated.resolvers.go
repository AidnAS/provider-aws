/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/official-providers/provider-aws/apis/s3/v1beta1"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Certificate.
func (mg *Certificate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CertificateAuthorityArn),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CertificateAuthorityArnRef,
		Selector:     mg.Spec.ForProvider.CertificateAuthorityArnSelector,
		To: reference.To{
			List:    &CertificateAuthorityList{},
			Managed: &CertificateAuthority{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CertificateAuthorityArn")
	}
	mg.Spec.ForProvider.CertificateAuthorityArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CertificateAuthorityArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this CertificateAuthority.
func (mg *CertificateAuthority) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.RevocationConfiguration); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.RevocationConfiguration[i3].CrlConfiguration); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RevocationConfiguration[i3].CrlConfiguration[i4].S3BucketName),
				Extract:      resource.ExtractResourceID(),
				Reference:    mg.Spec.ForProvider.RevocationConfiguration[i3].CrlConfiguration[i4].S3BucketNameRef,
				Selector:     mg.Spec.ForProvider.RevocationConfiguration[i3].CrlConfiguration[i4].S3BucketNameSelector,
				To: reference.To{
					List:    &v1beta1.BucketList{},
					Managed: &v1beta1.Bucket{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.RevocationConfiguration[i3].CrlConfiguration[i4].S3BucketName")
			}
			mg.Spec.ForProvider.RevocationConfiguration[i3].CrlConfiguration[i4].S3BucketName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.RevocationConfiguration[i3].CrlConfiguration[i4].S3BucketNameRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this CertificateAuthorityCertificate.
func (mg *CertificateAuthorityCertificate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CertificateAuthorityArn),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CertificateAuthorityArnRef,
		Selector:     mg.Spec.ForProvider.CertificateAuthorityArnSelector,
		To: reference.To{
			List:    &CertificateAuthorityList{},
			Managed: &CertificateAuthority{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CertificateAuthorityArn")
	}
	mg.Spec.ForProvider.CertificateAuthorityArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CertificateAuthorityArnRef = rsp.ResolvedReference

	return nil
}
