/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterCapacityProvidersDefaultCapacityProviderStrategyObservation struct {
}

type ClusterCapacityProvidersDefaultCapacityProviderStrategyParameters struct {

	// +kubebuilder:validation:Optional
	Base *float64 `json:"base,omitempty" tf:"base,omitempty"`

	// +kubebuilder:validation:Required
	CapacityProvider *string `json:"capacityProvider" tf:"capacity_provider,omitempty"`

	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type ClusterCapacityProvidersObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClusterCapacityProvidersParameters struct {

	// +kubebuilder:validation:Optional
	CapacityProviders []*string `json:"capacityProviders,omitempty" tf:"capacity_providers,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-aws/apis/ecs/v1beta1.Cluster
	// +kubebuilder:validation:Optional
	ClusterName *string `json:"clusterName,omitempty" tf:"cluster_name,omitempty"`

	// +kubebuilder:validation:Optional
	ClusterNameRef *v1.Reference `json:"clusterNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ClusterNameSelector *v1.Selector `json:"clusterNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefaultCapacityProviderStrategy []ClusterCapacityProvidersDefaultCapacityProviderStrategyParameters `json:"defaultCapacityProviderStrategy,omitempty" tf:"default_capacity_provider_strategy,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// ClusterCapacityProvidersSpec defines the desired state of ClusterCapacityProviders
type ClusterCapacityProvidersSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterCapacityProvidersParameters `json:"forProvider"`
}

// ClusterCapacityProvidersStatus defines the observed state of ClusterCapacityProviders.
type ClusterCapacityProvidersStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterCapacityProvidersObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterCapacityProviders is the Schema for the ClusterCapacityProviderss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ClusterCapacityProviders struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterCapacityProvidersSpec   `json:"spec"`
	Status            ClusterCapacityProvidersStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterCapacityProvidersList contains a list of ClusterCapacityProviderss
type ClusterCapacityProvidersList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterCapacityProviders `json:"items"`
}

// Repository type metadata.
var (
	ClusterCapacityProviders_Kind             = "ClusterCapacityProviders"
	ClusterCapacityProviders_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterCapacityProviders_Kind}.String()
	ClusterCapacityProviders_KindAPIVersion   = ClusterCapacityProviders_Kind + "." + CRDGroupVersion.String()
	ClusterCapacityProviders_GroupVersionKind = CRDGroupVersion.WithKind(ClusterCapacityProviders_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterCapacityProviders{}, &ClusterCapacityProvidersList{})
}
