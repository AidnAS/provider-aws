/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VirtualMfaDeviceObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	Base32StringSeed *string `json:"base32StringSeed,omitempty" tf:"base_32_string_seed,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	QrCodePng *string `json:"qrCodePng,omitempty" tf:"qr_code_png,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type VirtualMfaDeviceParameters struct {

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VirtualMfaDeviceName *string `json:"virtualMfaDeviceName" tf:"virtual_mfa_device_name,omitempty"`
}

// VirtualMfaDeviceSpec defines the desired state of VirtualMfaDevice
type VirtualMfaDeviceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VirtualMfaDeviceParameters `json:"forProvider"`
}

// VirtualMfaDeviceStatus defines the observed state of VirtualMfaDevice.
type VirtualMfaDeviceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VirtualMfaDeviceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualMfaDevice is the Schema for the VirtualMfaDevices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VirtualMfaDevice struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualMfaDeviceSpec   `json:"spec"`
	Status            VirtualMfaDeviceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualMfaDeviceList contains a list of VirtualMfaDevices
type VirtualMfaDeviceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualMfaDevice `json:"items"`
}

// Repository type metadata.
var (
	VirtualMfaDevice_Kind             = "VirtualMfaDevice"
	VirtualMfaDevice_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualMfaDevice_Kind}.String()
	VirtualMfaDevice_KindAPIVersion   = VirtualMfaDevice_Kind + "." + CRDGroupVersion.String()
	VirtualMfaDevice_GroupVersionKind = CRDGroupVersion.WithKind(VirtualMfaDevice_Kind)
)

func init() {
	SchemeBuilder.Register(&VirtualMfaDevice{}, &VirtualMfaDeviceList{})
}
