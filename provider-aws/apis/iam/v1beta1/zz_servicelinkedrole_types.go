/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceLinkedRoleObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	CreateDate *string `json:"createDate,omitempty" tf:"create_date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	UniqueID *string `json:"uniqueId,omitempty" tf:"unique_id,omitempty"`
}

type ServiceLinkedRoleParameters struct {

	// +kubebuilder:validation:Required
	AwsServiceName *string `json:"awsServiceName" tf:"aws_service_name,omitempty"`

	// +kubebuilder:validation:Optional
	CustomSuffix *string `json:"customSuffix,omitempty" tf:"custom_suffix,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ServiceLinkedRoleSpec defines the desired state of ServiceLinkedRole
type ServiceLinkedRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceLinkedRoleParameters `json:"forProvider"`
}

// ServiceLinkedRoleStatus defines the observed state of ServiceLinkedRole.
type ServiceLinkedRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceLinkedRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceLinkedRole is the Schema for the ServiceLinkedRoles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ServiceLinkedRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceLinkedRoleSpec   `json:"spec"`
	Status            ServiceLinkedRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceLinkedRoleList contains a list of ServiceLinkedRoles
type ServiceLinkedRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceLinkedRole `json:"items"`
}

// Repository type metadata.
var (
	ServiceLinkedRole_Kind             = "ServiceLinkedRole"
	ServiceLinkedRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceLinkedRole_Kind}.String()
	ServiceLinkedRole_KindAPIVersion   = ServiceLinkedRole_Kind + "." + CRDGroupVersion.String()
	ServiceLinkedRole_GroupVersionKind = CRDGroupVersion.WithKind(ServiceLinkedRole_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceLinkedRole{}, &ServiceLinkedRoleList{})
}
