/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceSpecificCredentialObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ServiceSpecificCredentialID *string `json:"serviceSpecificCredentialId,omitempty" tf:"service_specific_credential_id,omitempty"`

	ServiceUserName *string `json:"serviceUserName,omitempty" tf:"service_user_name,omitempty"`
}

type ServiceSpecificCredentialParameters struct {

	// +kubebuilder:validation:Required
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +crossplane:generate:reference:type=User
	// +kubebuilder:validation:Optional
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	// +kubebuilder:validation:Optional
	UserNameRef *v1.Reference `json:"userNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	UserNameSelector *v1.Selector `json:"userNameSelector,omitempty" tf:"-"`
}

// ServiceSpecificCredentialSpec defines the desired state of ServiceSpecificCredential
type ServiceSpecificCredentialSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceSpecificCredentialParameters `json:"forProvider"`
}

// ServiceSpecificCredentialStatus defines the observed state of ServiceSpecificCredential.
type ServiceSpecificCredentialStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceSpecificCredentialObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceSpecificCredential is the Schema for the ServiceSpecificCredentials API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ServiceSpecificCredential struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSpecificCredentialSpec   `json:"spec"`
	Status            ServiceSpecificCredentialStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceSpecificCredentialList contains a list of ServiceSpecificCredentials
type ServiceSpecificCredentialList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceSpecificCredential `json:"items"`
}

// Repository type metadata.
var (
	ServiceSpecificCredential_Kind             = "ServiceSpecificCredential"
	ServiceSpecificCredential_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceSpecificCredential_Kind}.String()
	ServiceSpecificCredential_KindAPIVersion   = ServiceSpecificCredential_Kind + "." + CRDGroupVersion.String()
	ServiceSpecificCredential_GroupVersionKind = CRDGroupVersion.WithKind(ServiceSpecificCredential_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceSpecificCredential{}, &ServiceSpecificCredentialList{})
}
