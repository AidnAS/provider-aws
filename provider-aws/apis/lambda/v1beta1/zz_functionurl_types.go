/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CorsObservation struct {
}

type CorsParameters struct {

	// +kubebuilder:validation:Optional
	AllowCredentials *bool `json:"allowCredentials,omitempty" tf:"allow_credentials,omitempty"`

	// +kubebuilder:validation:Optional
	AllowHeaders []*string `json:"allowHeaders,omitempty" tf:"allow_headers,omitempty"`

	// +kubebuilder:validation:Optional
	AllowMethods []*string `json:"allowMethods,omitempty" tf:"allow_methods,omitempty"`

	// +kubebuilder:validation:Optional
	AllowOrigins []*string `json:"allowOrigins,omitempty" tf:"allow_origins,omitempty"`

	// +kubebuilder:validation:Optional
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// +kubebuilder:validation:Optional
	MaxAge *float64 `json:"maxAge,omitempty" tf:"max_age,omitempty"`
}

type FunctionURLObservation struct {
	FunctionArn *string `json:"functionArn,omitempty" tf:"function_arn,omitempty"`

	FunctionURL *string `json:"functionUrl,omitempty" tf:"function_url,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	URLID *string `json:"urlId,omitempty" tf:"url_id,omitempty"`
}

type FunctionURLParameters struct {

	// +kubebuilder:validation:Required
	AuthorizationType *string `json:"authorizationType" tf:"authorization_type,omitempty"`

	// +kubebuilder:validation:Optional
	Cors []CorsParameters `json:"cors,omitempty" tf:"cors,omitempty"`

	// +crossplane:generate:reference:type=Function
	// +kubebuilder:validation:Optional
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// +kubebuilder:validation:Optional
	FunctionNameRef *v1.Reference `json:"functionNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	FunctionNameSelector *v1.Selector `json:"functionNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Qualifier *string `json:"qualifier,omitempty" tf:"qualifier,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// FunctionURLSpec defines the desired state of FunctionURL
type FunctionURLSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FunctionURLParameters `json:"forProvider"`
}

// FunctionURLStatus defines the observed state of FunctionURL.
type FunctionURLStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FunctionURLObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FunctionURL is the Schema for the FunctionURLs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type FunctionURL struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FunctionURLSpec   `json:"spec"`
	Status            FunctionURLStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FunctionURLList contains a list of FunctionURLs
type FunctionURLList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FunctionURL `json:"items"`
}

// Repository type metadata.
var (
	FunctionURL_Kind             = "FunctionURL"
	FunctionURL_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FunctionURL_Kind}.String()
	FunctionURL_KindAPIVersion   = FunctionURL_Kind + "." + CRDGroupVersion.String()
	FunctionURL_GroupVersionKind = CRDGroupVersion.WithKind(FunctionURL_Kind)
)

func init() {
	SchemeBuilder.Register(&FunctionURL{}, &FunctionURLList{})
}
