/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectionPasswordEncryptionObservation struct {
}

type ConnectionPasswordEncryptionParameters struct {

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-aws/apis/kms/v1beta1.Key
	// +kubebuilder:validation:Optional
	AwsKMSKeyID *string `json:"awsKmsKeyId,omitempty" tf:"aws_kms_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	AwsKMSKeyIDRef *v1.Reference `json:"awsKmsKeyIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AwsKMSKeyIDSelector *v1.Selector `json:"awsKmsKeyIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	ReturnConnectionPasswordEncrypted *bool `json:"returnConnectionPasswordEncrypted" tf:"return_connection_password_encrypted,omitempty"`
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsObservation struct {
}

type DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsParameters struct {

	// +kubebuilder:validation:Required
	ConnectionPasswordEncryption []ConnectionPasswordEncryptionParameters `json:"connectionPasswordEncryption" tf:"connection_password_encryption,omitempty"`

	// +kubebuilder:validation:Required
	EncryptionAtRest []EncryptionAtRestParameters `json:"encryptionAtRest" tf:"encryption_at_rest,omitempty"`
}

type DataCatalogEncryptionSettingsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DataCatalogEncryptionSettingsParameters struct {

	// +kubebuilder:validation:Optional
	CatalogID *string `json:"catalogId,omitempty" tf:"catalog_id,omitempty"`

	// +kubebuilder:validation:Required
	DataCatalogEncryptionSettings []DataCatalogEncryptionSettingsDataCatalogEncryptionSettingsParameters `json:"dataCatalogEncryptionSettings" tf:"data_catalog_encryption_settings,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

type EncryptionAtRestObservation struct {
}

type EncryptionAtRestParameters struct {

	// +kubebuilder:validation:Required
	CatalogEncryptionMode *string `json:"catalogEncryptionMode" tf:"catalog_encryption_mode,omitempty"`

	// +crossplane:generate:reference:type=github.com/upbound/official-providers/provider-aws/apis/kms/v1beta1.Key
	// +kubebuilder:validation:Optional
	SseAwsKMSKeyID *string `json:"sseAwsKmsKeyId,omitempty" tf:"sse_aws_kms_key_id,omitempty"`

	// +kubebuilder:validation:Optional
	SseAwsKMSKeyIDRef *v1.Reference `json:"sseAwsKmsKeyIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SseAwsKMSKeyIDSelector *v1.Selector `json:"sseAwsKmsKeyIdSelector,omitempty" tf:"-"`
}

// DataCatalogEncryptionSettingsSpec defines the desired state of DataCatalogEncryptionSettings
type DataCatalogEncryptionSettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataCatalogEncryptionSettingsParameters `json:"forProvider"`
}

// DataCatalogEncryptionSettingsStatus defines the observed state of DataCatalogEncryptionSettings.
type DataCatalogEncryptionSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataCatalogEncryptionSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataCatalogEncryptionSettings is the Schema for the DataCatalogEncryptionSettingss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DataCatalogEncryptionSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataCatalogEncryptionSettingsSpec   `json:"spec"`
	Status            DataCatalogEncryptionSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataCatalogEncryptionSettingsList contains a list of DataCatalogEncryptionSettingss
type DataCatalogEncryptionSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataCatalogEncryptionSettings `json:"items"`
}

// Repository type metadata.
var (
	DataCatalogEncryptionSettings_Kind             = "DataCatalogEncryptionSettings"
	DataCatalogEncryptionSettings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DataCatalogEncryptionSettings_Kind}.String()
	DataCatalogEncryptionSettings_KindAPIVersion   = DataCatalogEncryptionSettings_Kind + "." + CRDGroupVersion.String()
	DataCatalogEncryptionSettings_GroupVersionKind = CRDGroupVersion.WithKind(DataCatalogEncryptionSettings_Kind)
)

func init() {
	SchemeBuilder.Register(&DataCatalogEncryptionSettings{}, &DataCatalogEncryptionSettingsList{})
}
