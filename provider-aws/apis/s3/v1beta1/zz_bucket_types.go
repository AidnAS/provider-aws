/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessControlTranslationObservation struct {
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`
}

type AccessControlTranslationParameters struct {
}

type ApplyServerSideEncryptionByDefaultObservation struct {
	KMSMasterKeyID *string `json:"kmsMasterKeyId,omitempty" tf:"kms_master_key_id,omitempty"`

	SseAlgorithm *string `json:"sseAlgorithm,omitempty" tf:"sse_algorithm,omitempty"`
}

type ApplyServerSideEncryptionByDefaultParameters struct {
}

type BucketObservation struct {
	ACL *string `json:"acl,omitempty" tf:"acl,omitempty"`

	AccelerationStatus *string `json:"accelerationStatus,omitempty" tf:"acceleration_status,omitempty"`

	BucketDomainName *string `json:"bucketDomainName,omitempty" tf:"bucket_domain_name,omitempty"`

	BucketRegionalDomainName *string `json:"bucketRegionalDomainName,omitempty" tf:"bucket_regional_domain_name,omitempty"`

	CorsRule []CorsRuleObservation `json:"corsRule,omitempty" tf:"cors_rule,omitempty"`

	Grant []GrantObservation `json:"grant,omitempty" tf:"grant,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LifecycleRule []LifecycleRuleObservation `json:"lifecycleRule,omitempty" tf:"lifecycle_rule,omitempty"`

	Logging []LoggingObservation `json:"logging,omitempty" tf:"logging,omitempty"`

	ObjectLockConfiguration []ObjectLockConfigurationObservation `json:"objectLockConfiguration,omitempty" tf:"object_lock_configuration,omitempty"`

	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	ReplicationConfiguration []ReplicationConfigurationObservation `json:"replicationConfiguration,omitempty" tf:"replication_configuration,omitempty"`

	RequestPayer *string `json:"requestPayer,omitempty" tf:"request_payer,omitempty"`

	ServerSideEncryptionConfiguration []ServerSideEncryptionConfigurationObservation `json:"serverSideEncryptionConfiguration,omitempty" tf:"server_side_encryption_configuration,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`

	Versioning []VersioningObservation `json:"versioning,omitempty" tf:"versioning,omitempty"`

	Website []WebsiteObservation `json:"website,omitempty" tf:"website,omitempty"`

	WebsiteDomain *string `json:"websiteDomain,omitempty" tf:"website_domain,omitempty"`

	WebsiteEndpoint *string `json:"websiteEndpoint,omitempty" tf:"website_endpoint,omitempty"`
}

type BucketParameters struct {

	// +kubebuilder:validation:Optional
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// +kubebuilder:validation:Optional
	ForceDestroy *bool `json:"forceDestroy,omitempty" tf:"force_destroy,omitempty"`

	// +kubebuilder:validation:Optional
	HostedZoneID *string `json:"hostedZoneId,omitempty" tf:"hosted_zone_id,omitempty"`

	// +kubebuilder:validation:Optional
	ObjectLockEnabled *bool `json:"objectLockEnabled,omitempty" tf:"object_lock_enabled,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type CorsRuleObservation struct {
	AllowedHeaders []*string `json:"allowedHeaders,omitempty" tf:"allowed_headers,omitempty"`

	AllowedMethods []*string `json:"allowedMethods,omitempty" tf:"allowed_methods,omitempty"`

	AllowedOrigins []*string `json:"allowedOrigins,omitempty" tf:"allowed_origins,omitempty"`

	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	MaxAgeSeconds *float64 `json:"maxAgeSeconds,omitempty" tf:"max_age_seconds,omitempty"`
}

type CorsRuleParameters struct {
}

type DefaultRetentionObservation struct {
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	Years *float64 `json:"years,omitempty" tf:"years,omitempty"`
}

type DefaultRetentionParameters struct {
}

type DestinationObservation struct {
	AccessControlTranslation []AccessControlTranslationObservation `json:"accessControlTranslation,omitempty" tf:"access_control_translation,omitempty"`

	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	Bucket *string `json:"bucket,omitempty" tf:"bucket,omitempty"`

	Metrics []MetricsObservation `json:"metrics,omitempty" tf:"metrics,omitempty"`

	ReplicaKMSKeyID *string `json:"replicaKmsKeyId,omitempty" tf:"replica_kms_key_id,omitempty"`

	ReplicationTime []ReplicationTimeObservation `json:"replicationTime,omitempty" tf:"replication_time,omitempty"`

	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type DestinationParameters struct {
}

type ExpirationObservation struct {
	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	ExpiredObjectDeleteMarker *bool `json:"expiredObjectDeleteMarker,omitempty" tf:"expired_object_delete_marker,omitempty"`
}

type ExpirationParameters struct {
}

type FilterObservation struct {
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type FilterParameters struct {
}

type GrantObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	URI *string `json:"uri,omitempty" tf:"uri,omitempty"`
}

type GrantParameters struct {
}

type LifecycleRuleObservation struct {
	AbortIncompleteMultipartUploadDays *float64 `json:"abortIncompleteMultipartUploadDays,omitempty" tf:"abort_incomplete_multipart_upload_days,omitempty"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	Expiration []ExpirationObservation `json:"expiration,omitempty" tf:"expiration,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	NoncurrentVersionExpiration []NoncurrentVersionExpirationObservation `json:"noncurrentVersionExpiration,omitempty" tf:"noncurrent_version_expiration,omitempty"`

	NoncurrentVersionTransition []NoncurrentVersionTransitionObservation `json:"noncurrentVersionTransition,omitempty" tf:"noncurrent_version_transition,omitempty"`

	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	Transition []TransitionObservation `json:"transition,omitempty" tf:"transition,omitempty"`
}

type LifecycleRuleParameters struct {
}

type LoggingObservation struct {
	TargetBucket *string `json:"targetBucket,omitempty" tf:"target_bucket,omitempty"`

	TargetPrefix *string `json:"targetPrefix,omitempty" tf:"target_prefix,omitempty"`
}

type LoggingParameters struct {
}

type MetricsObservation struct {
	Minutes *float64 `json:"minutes,omitempty" tf:"minutes,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type MetricsParameters struct {
}

type NoncurrentVersionExpirationObservation struct {
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`
}

type NoncurrentVersionExpirationParameters struct {
}

type NoncurrentVersionTransitionObservation struct {
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type NoncurrentVersionTransitionParameters struct {
}

type ObjectLockConfigurationObservation struct {
	ObjectLockEnabled *string `json:"objectLockEnabled,omitempty" tf:"object_lock_enabled,omitempty"`

	Rule []RuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`
}

type ObjectLockConfigurationParameters struct {
}

type ReplicationConfigurationObservation struct {
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`
}

type ReplicationConfigurationParameters struct {
}

type ReplicationTimeObservation struct {
	Minutes *float64 `json:"minutes,omitempty" tf:"minutes,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ReplicationTimeParameters struct {
}

type RuleObservation struct {
	DefaultRetention []DefaultRetentionObservation `json:"defaultRetention,omitempty" tf:"default_retention,omitempty"`
}

type RuleParameters struct {
}

type RulesObservation struct {
	DeleteMarkerReplicationStatus *string `json:"deleteMarkerReplicationStatus,omitempty" tf:"delete_marker_replication_status,omitempty"`

	Destination []DestinationObservation `json:"destination,omitempty" tf:"destination,omitempty"`

	Filter []FilterObservation `json:"filter,omitempty" tf:"filter,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	SourceSelectionCriteria []SourceSelectionCriteriaObservation `json:"sourceSelectionCriteria,omitempty" tf:"source_selection_criteria,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type RulesParameters struct {
}

type ServerSideEncryptionConfigurationObservation struct {
	Rule []ServerSideEncryptionConfigurationRuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`
}

type ServerSideEncryptionConfigurationParameters struct {
}

type ServerSideEncryptionConfigurationRuleObservation struct {
	ApplyServerSideEncryptionByDefault []ApplyServerSideEncryptionByDefaultObservation `json:"applyServerSideEncryptionByDefault,omitempty" tf:"apply_server_side_encryption_by_default,omitempty"`

	BucketKeyEnabled *bool `json:"bucketKeyEnabled,omitempty" tf:"bucket_key_enabled,omitempty"`
}

type ServerSideEncryptionConfigurationRuleParameters struct {
}

type SourceSelectionCriteriaObservation struct {
	SseKMSEncryptedObjects []SseKMSEncryptedObjectsObservation `json:"sseKmsEncryptedObjects,omitempty" tf:"sse_kms_encrypted_objects,omitempty"`
}

type SourceSelectionCriteriaParameters struct {
}

type SseKMSEncryptedObjectsObservation struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type SseKMSEncryptedObjectsParameters struct {
}

type TransitionObservation struct {
	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	StorageClass *string `json:"storageClass,omitempty" tf:"storage_class,omitempty"`
}

type TransitionParameters struct {
}

type VersioningObservation struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	MfaDelete *bool `json:"mfaDelete,omitempty" tf:"mfa_delete,omitempty"`
}

type VersioningParameters struct {
}

type WebsiteObservation struct {
	ErrorDocument *string `json:"errorDocument,omitempty" tf:"error_document,omitempty"`

	IndexDocument *string `json:"indexDocument,omitempty" tf:"index_document,omitempty"`

	RedirectAllRequestsTo *string `json:"redirectAllRequestsTo,omitempty" tf:"redirect_all_requests_to,omitempty"`

	RoutingRules *string `json:"routingRules,omitempty" tf:"routing_rules,omitempty"`
}

type WebsiteParameters struct {
}

// BucketSpec defines the desired state of Bucket
type BucketSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketParameters `json:"forProvider"`
}

// BucketStatus defines the observed state of Bucket.
type BucketStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Bucket is the Schema for the Buckets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Bucket struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BucketSpec   `json:"spec"`
	Status            BucketStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketList contains a list of Buckets
type BucketList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Bucket `json:"items"`
}

// Repository type metadata.
var (
	Bucket_Kind             = "Bucket"
	Bucket_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Bucket_Kind}.String()
	Bucket_KindAPIVersion   = Bucket_Kind + "." + CRDGroupVersion.String()
	Bucket_GroupVersionKind = CRDGroupVersion.WithKind(Bucket_Kind)
)

func init() {
	SchemeBuilder.Register(&Bucket{}, &BucketList{})
}
