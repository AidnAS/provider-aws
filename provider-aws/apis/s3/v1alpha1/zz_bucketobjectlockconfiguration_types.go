/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketObjectLockConfigurationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BucketObjectLockConfigurationParameters struct {

	// +kubebuilder:validation:Required
	Bucket *string `json:"bucket" tf:"bucket,omitempty"`

	// +kubebuilder:validation:Optional
	ExpectedBucketOwner *string `json:"expectedBucketOwner,omitempty" tf:"expected_bucket_owner,omitempty"`

	// +kubebuilder:validation:Optional
	ObjectLockEnabled *string `json:"objectLockEnabled,omitempty" tf:"object_lock_enabled,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Required
	Rule []RuleParameters `json:"rule" tf:"rule,omitempty"`

	// +kubebuilder:validation:Optional
	TokenSecretRef *v1.SecretKeySelector `json:"tokenSecretRef,omitempty" tf:"-"`
}

type DefaultRetentionObservation struct {
}

type DefaultRetentionParameters struct {

	// +kubebuilder:validation:Optional
	Days *float64 `json:"days,omitempty" tf:"days,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// +kubebuilder:validation:Optional
	Years *float64 `json:"years,omitempty" tf:"years,omitempty"`
}

type RuleObservation struct {
}

type RuleParameters struct {

	// +kubebuilder:validation:Required
	DefaultRetention []DefaultRetentionParameters `json:"defaultRetention" tf:"default_retention,omitempty"`
}

// BucketObjectLockConfigurationSpec defines the desired state of BucketObjectLockConfiguration
type BucketObjectLockConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketObjectLockConfigurationParameters `json:"forProvider"`
}

// BucketObjectLockConfigurationStatus defines the observed state of BucketObjectLockConfiguration.
type BucketObjectLockConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketObjectLockConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BucketObjectLockConfiguration is the Schema for the BucketObjectLockConfigurations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type BucketObjectLockConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BucketObjectLockConfigurationSpec   `json:"spec"`
	Status            BucketObjectLockConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketObjectLockConfigurationList contains a list of BucketObjectLockConfigurations
type BucketObjectLockConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BucketObjectLockConfiguration `json:"items"`
}

// Repository type metadata.
var (
	BucketObjectLockConfiguration_Kind             = "BucketObjectLockConfiguration"
	BucketObjectLockConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BucketObjectLockConfiguration_Kind}.String()
	BucketObjectLockConfiguration_KindAPIVersion   = BucketObjectLockConfiguration_Kind + "." + CRDGroupVersion.String()
	BucketObjectLockConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(BucketObjectLockConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&BucketObjectLockConfiguration{}, &BucketObjectLockConfigurationList{})
}
