/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EIPAssociationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EIPAssociationParameters struct {

	// +kubebuilder:validation:Optional
	AllocationID *string `json:"allocationId,omitempty" tf:"allocation_id,omitempty"`

	// +kubebuilder:validation:Optional
	AllowReassociation *bool `json:"allowReassociation,omitempty" tf:"allow_reassociation,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkInterfaceID *string `json:"networkInterfaceId,omitempty" tf:"network_interface_id,omitempty"`

	// +kubebuilder:validation:Optional
	PrivateIPAddress *string `json:"privateIpAddress,omitempty" tf:"private_ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	PublicIP *string `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`
}

// EIPAssociationSpec defines the desired state of EIPAssociation
type EIPAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EIPAssociationParameters `json:"forProvider"`
}

// EIPAssociationStatus defines the observed state of EIPAssociation.
type EIPAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EIPAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EIPAssociation is the Schema for the EIPAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type EIPAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EIPAssociationSpec   `json:"spec"`
	Status            EIPAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EIPAssociationList contains a list of EIPAssociations
type EIPAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EIPAssociation `json:"items"`
}

// Repository type metadata.
var (
	EIPAssociation_Kind             = "EIPAssociation"
	EIPAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EIPAssociation_Kind}.String()
	EIPAssociation_KindAPIVersion   = EIPAssociation_Kind + "." + CRDGroupVersion.String()
	EIPAssociation_GroupVersionKind = CRDGroupVersion.WithKind(EIPAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&EIPAssociation{}, &EIPAssociationList{})
}
