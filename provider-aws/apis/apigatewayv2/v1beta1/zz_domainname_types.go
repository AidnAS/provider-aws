/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DomainNameConfigurationObservation struct {
	HostedZoneID *string `json:"hostedZoneId,omitempty" tf:"hosted_zone_id,omitempty"`

	TargetDomainName *string `json:"targetDomainName,omitempty" tf:"target_domain_name,omitempty"`
}

type DomainNameConfigurationParameters struct {

	// +kubebuilder:validation:Required
	CertificateArn *string `json:"certificateArn" tf:"certificate_arn,omitempty"`

	// +kubebuilder:validation:Required
	EndpointType *string `json:"endpointType" tf:"endpoint_type,omitempty"`

	// +kubebuilder:validation:Optional
	OwnershipVerificationCertificateArn *string `json:"ownershipVerificationCertificateArn,omitempty" tf:"ownership_verification_certificate_arn,omitempty"`

	// +kubebuilder:validation:Required
	SecurityPolicy *string `json:"securityPolicy" tf:"security_policy,omitempty"`
}

type DomainNameObservation struct {
	APIMappingSelectionExpression *string `json:"apiMappingSelectionExpression,omitempty" tf:"api_mapping_selection_expression,omitempty"`

	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	DomainNameConfiguration []DomainNameConfigurationObservation `json:"domainNameConfiguration,omitempty" tf:"domain_name_configuration,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type DomainNameParameters struct {

	// +kubebuilder:validation:Required
	DomainNameConfiguration []DomainNameConfigurationParameters `json:"domainNameConfiguration" tf:"domain_name_configuration,omitempty"`

	// +kubebuilder:validation:Optional
	MutualTLSAuthentication []MutualTLSAuthenticationParameters `json:"mutualTlsAuthentication,omitempty" tf:"mutual_tls_authentication,omitempty"`

	// Region is the region you'd like your resource to be created in.
	// +terrajet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type MutualTLSAuthenticationObservation struct {
}

type MutualTLSAuthenticationParameters struct {

	// +kubebuilder:validation:Required
	TruststoreURI *string `json:"truststoreUri" tf:"truststore_uri,omitempty"`

	// +kubebuilder:validation:Optional
	TruststoreVersion *string `json:"truststoreVersion,omitempty" tf:"truststore_version,omitempty"`
}

// DomainNameSpec defines the desired state of DomainName
type DomainNameSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DomainNameParameters `json:"forProvider"`
}

// DomainNameStatus defines the observed state of DomainName.
type DomainNameStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DomainNameObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DomainName is the Schema for the DomainNames API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DomainName struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainNameSpec   `json:"spec"`
	Status            DomainNameStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainNameList contains a list of DomainNames
type DomainNameList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainName `json:"items"`
}

// Repository type metadata.
var (
	DomainName_Kind             = "DomainName"
	DomainName_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainName_Kind}.String()
	DomainName_KindAPIVersion   = DomainName_Kind + "." + CRDGroupVersion.String()
	DomainName_GroupVersionKind = CRDGroupVersion.WithKind(DomainName_Kind)
)

func init() {
	SchemeBuilder.Register(&DomainName{}, &DomainNameList{})
}
