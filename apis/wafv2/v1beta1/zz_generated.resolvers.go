/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this RuleGroup.
func (mg *RuleGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Rule); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Rule[i3].Statement); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement); i6++ {
					for i7 := 0; i7 < len(mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].IPSetReferenceStatement); i7++ {
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].IPSetReferenceStatement[i7].Arn),
							Extract:      resource.ExtractParamPath("arn", true),
							Reference:    mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].IPSetReferenceStatement[i7].ArnRef,
							Selector:     mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].IPSetReferenceStatement[i7].ArnSelector,
							To: reference.To{
								List:    &IPSetList{},
								Managed: &IPSet{},
							},
						})
						if err != nil {
							return errors.Wrap(err, "mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].IPSetReferenceStatement[i7].Arn")
						}
						mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].IPSetReferenceStatement[i7].Arn = reference.ToPtrValue(rsp.ResolvedValue)
						mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].IPSetReferenceStatement[i7].ArnRef = rsp.ResolvedReference

					}
				}
			}
		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Rule); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Rule[i3].Statement); i4++ {
			for i5 := 0; i5 < len(mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement); i5++ {
				for i6 := 0; i6 < len(mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement); i6++ {
					for i7 := 0; i7 < len(mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].RegexPatternSetReferenceStatement); i7++ {
						rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
							CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].RegexPatternSetReferenceStatement[i7].Arn),
							Extract:      resource.ExtractParamPath("arn", true),
							Reference:    mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].RegexPatternSetReferenceStatement[i7].ArnRef,
							Selector:     mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].RegexPatternSetReferenceStatement[i7].ArnSelector,
							To: reference.To{
								List:    &RegexPatternSetList{},
								Managed: &RegexPatternSet{},
							},
						})
						if err != nil {
							return errors.Wrap(err, "mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].RegexPatternSetReferenceStatement[i7].Arn")
						}
						mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].RegexPatternSetReferenceStatement[i7].Arn = reference.ToPtrValue(rsp.ResolvedValue)
						mg.Spec.ForProvider.Rule[i3].Statement[i4].OrStatement[i5].Statement[i6].RegexPatternSetReferenceStatement[i7].ArnRef = rsp.ResolvedReference

					}
				}
			}
		}
	}

	return nil
}
