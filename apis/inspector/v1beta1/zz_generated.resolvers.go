/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	resource "github.com/upbound/upjet/pkg/resource"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this AssessmentTarget.
func (mg *AssessmentTarget) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceGroupArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.ResourceGroupArnRef,
		Selector:     mg.Spec.ForProvider.ResourceGroupArnSelector,
		To: reference.To{
			List:    &ResourceGroupList{},
			Managed: &ResourceGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceGroupArn")
	}
	mg.Spec.ForProvider.ResourceGroupArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceGroupArnRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this AssessmentTemplate.
func (mg *AssessmentTemplate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.TargetArn),
		Extract:      resource.ExtractParamPath("arn", true),
		Reference:    mg.Spec.ForProvider.TargetArnRef,
		Selector:     mg.Spec.ForProvider.TargetArnSelector,
		To: reference.To{
			List:    &AssessmentTargetList{},
			Managed: &AssessmentTarget{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.TargetArn")
	}
	mg.Spec.ForProvider.TargetArn = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.TargetArnRef = rsp.ResolvedReference

	return nil
}
