/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ReplicaExternalKeyObservation struct {
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	ExpirationModel *string `json:"expirationModel,omitempty" tf:"expiration_model,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	KeyState *string `json:"keyState,omitempty" tf:"key_state,omitempty"`

	KeyUsage *string `json:"keyUsage,omitempty" tf:"key_usage,omitempty"`

	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type ReplicaExternalKeyParameters struct {

	// +kubebuilder:validation:Optional
	BypassPolicyLockoutSafetyCheck *bool `json:"bypassPolicyLockoutSafetyCheck,omitempty" tf:"bypass_policy_lockout_safety_check,omitempty"`

	// +kubebuilder:validation:Optional
	DeletionWindowInDays *float64 `json:"deletionWindowInDays,omitempty" tf:"deletion_window_in_days,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	KeyMaterialBase64SecretRef *v1.SecretKeySelector `json:"keyMaterialBase64SecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// +crossplane:generate:reference:type=ExternalKey
	// +crossplane:generate:reference:extractor=github.com/upbound/provider-aws/config/common.ARNExtractor()
	// +kubebuilder:validation:Optional
	PrimaryKeyArn *string `json:"primaryKeyArn,omitempty" tf:"primary_key_arn,omitempty"`

	// Reference to a ExternalKey to populate primaryKeyArn.
	// +kubebuilder:validation:Optional
	PrimaryKeyArnRef *v1.Reference `json:"primaryKeyArnRef,omitempty" tf:"-"`

	// Selector for a ExternalKey to populate primaryKeyArn.
	// +kubebuilder:validation:Optional
	PrimaryKeyArnSelector *v1.Selector `json:"primaryKeyArnSelector,omitempty" tf:"-"`

	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	ValidTo *string `json:"validTo,omitempty" tf:"valid_to,omitempty"`
}

// ReplicaExternalKeySpec defines the desired state of ReplicaExternalKey
type ReplicaExternalKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ReplicaExternalKeyParameters `json:"forProvider"`
}

// ReplicaExternalKeyStatus defines the observed state of ReplicaExternalKey.
type ReplicaExternalKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ReplicaExternalKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicaExternalKey is the Schema for the ReplicaExternalKeys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ReplicaExternalKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ReplicaExternalKeySpec   `json:"spec"`
	Status            ReplicaExternalKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ReplicaExternalKeyList contains a list of ReplicaExternalKeys
type ReplicaExternalKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ReplicaExternalKey `json:"items"`
}

// Repository type metadata.
var (
	ReplicaExternalKey_Kind             = "ReplicaExternalKey"
	ReplicaExternalKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ReplicaExternalKey_Kind}.String()
	ReplicaExternalKey_KindAPIVersion   = ReplicaExternalKey_Kind + "." + CRDGroupVersion.String()
	ReplicaExternalKey_GroupVersionKind = CRDGroupVersion.WithKind(ReplicaExternalKey_Kind)
)

func init() {
	SchemeBuilder.Register(&ReplicaExternalKey{}, &ReplicaExternalKeyList{})
}
