/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AMIDistributionConfigurationObservation struct {
}

type AMIDistributionConfigurationParameters struct {

	// Key-value map of tags to apply to the distributed AMI.
	// +kubebuilder:validation:Optional
	AMITags map[string]*string `json:"amiTags,omitempty" tf:"ami_tags,omitempty"`

	// Description to apply to the distributed AMI.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key to encrypt the distributed AMI.
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// Configuration block of EC2 launch permissions to apply to the distributed AMI. Detailed below.
	// +kubebuilder:validation:Optional
	LaunchPermission []LaunchPermissionParameters `json:"launchPermission,omitempty" tf:"launch_permission,omitempty"`

	// Name to apply to the distributed AMI.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Set of AWS Account identifiers to distribute the AMI.
	// +kubebuilder:validation:Optional
	TargetAccountIds []*string `json:"targetAccountIds,omitempty" tf:"target_account_ids,omitempty"`
}

type ContainerDistributionConfigurationObservation struct {
}

type ContainerDistributionConfigurationParameters struct {

	// Set of tags that are attached to the container distribution configuration.
	// +kubebuilder:validation:Optional
	ContainerTags []*string `json:"containerTags,omitempty" tf:"container_tags,omitempty"`

	// Description of the container distribution configuration.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Configuration block with the destination repository for the container distribution configuration.
	// +kubebuilder:validation:Required
	TargetRepository []ContainerDistributionConfigurationTargetRepositoryParameters `json:"targetRepository" tf:"target_repository,omitempty"`
}

type ContainerDistributionConfigurationTargetRepositoryObservation struct {
}

type ContainerDistributionConfigurationTargetRepositoryParameters struct {

	// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
	// +kubebuilder:validation:Required
	RepositoryName *string `json:"repositoryName" tf:"repository_name,omitempty"`

	// The service in which this image is registered. Valid values: ECR.
	// +kubebuilder:validation:Required
	Service *string `json:"service" tf:"service,omitempty"`
}

type DistributionConfigurationObservation struct {

	// Amazon Resource Name (ARN) of the distribution configuration.
	Arn *string `json:"arn,omitempty" tf:"arn,omitempty"`

	// Date the distribution configuration was created.
	DateCreated *string `json:"dateCreated,omitempty" tf:"date_created,omitempty"`

	// Date the distribution configuration was updated.
	DateUpdated *string `json:"dateUpdated,omitempty" tf:"date_updated,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
	TagsAll map[string]*string `json:"tagsAll,omitempty" tf:"tags_all,omitempty"`
}

type DistributionConfigurationParameters struct {

	// Description of the distribution configuration.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// One or more configuration blocks with distribution settings. Detailed below.
	// +kubebuilder:validation:Required
	Distribution []DistributionParameters `json:"distribution" tf:"distribution,omitempty"`

	// Name of the distribution configuration.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// AWS Region for the distribution.
	// Region is the region you'd like your resource to be created in.
	// +upjet:crd:field:TFTag=-
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"-"`

	// Key-value map of resource tags.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type DistributionObservation struct {
}

type DistributionParameters struct {

	// Configuration block with Amazon Machine Image (AMI) distribution settings. Detailed below.
	// +kubebuilder:validation:Optional
	AMIDistributionConfiguration []AMIDistributionConfigurationParameters `json:"amiDistributionConfiguration,omitempty" tf:"ami_distribution_configuration,omitempty"`

	// Configuration block with container distribution settings. Detailed below.
	// +kubebuilder:validation:Optional
	ContainerDistributionConfiguration []ContainerDistributionConfigurationParameters `json:"containerDistributionConfiguration,omitempty" tf:"container_distribution_configuration,omitempty"`

	// Set of launch template configuration settings that apply to image distribution. Detailed below.
	// +kubebuilder:validation:Optional
	LaunchTemplateConfiguration []LaunchTemplateConfigurationParameters `json:"launchTemplateConfiguration,omitempty" tf:"launch_template_configuration,omitempty"`

	// Set of Amazon Resource Names (ARNs) of License Manager License Configurations.
	// +kubebuilder:validation:Optional
	LicenseConfigurationArns []*string `json:"licenseConfigurationArns,omitempty" tf:"license_configuration_arns,omitempty"`

	// AWS Region for the distribution.
	// +kubebuilder:validation:Required
	Region *string `json:"region" tf:"region,omitempty"`
}

type LaunchPermissionObservation struct {
}

type LaunchPermissionParameters struct {

	// Set of AWS Organization ARNs to assign.
	// +kubebuilder:validation:Optional
	OrganizationArns []*string `json:"organizationArns,omitempty" tf:"organization_arns,omitempty"`

	// Set of AWS Organizational Unit ARNs to assign.
	// +kubebuilder:validation:Optional
	OrganizationalUnitArns []*string `json:"organizationalUnitArns,omitempty" tf:"organizational_unit_arns,omitempty"`

	// Set of EC2 launch permission user groups to assign. Use all to distribute a public AMI.
	// +kubebuilder:validation:Optional
	UserGroups []*string `json:"userGroups,omitempty" tf:"user_groups,omitempty"`

	// Set of AWS Account identifiers to assign.
	// +kubebuilder:validation:Optional
	UserIds []*string `json:"userIds,omitempty" tf:"user_ids,omitempty"`
}

type LaunchTemplateConfigurationObservation struct {
}

type LaunchTemplateConfigurationParameters struct {

	// The account ID that this configuration applies to.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// Indicates whether to set the specified Amazon EC2 launch template as the default launch template. Defaults to true.
	// +kubebuilder:validation:Optional
	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	// The ID of the Amazon EC2 launch template to use.
	// +kubebuilder:validation:Required
	LaunchTemplateID *string `json:"launchTemplateId" tf:"launch_template_id,omitempty"`
}

// DistributionConfigurationSpec defines the desired state of DistributionConfiguration
type DistributionConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DistributionConfigurationParameters `json:"forProvider"`
}

// DistributionConfigurationStatus defines the observed state of DistributionConfiguration.
type DistributionConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DistributionConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DistributionConfiguration is the Schema for the DistributionConfigurations API. Manage an Image Builder Distribution Configuration
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DistributionConfiguration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DistributionConfigurationSpec   `json:"spec"`
	Status            DistributionConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DistributionConfigurationList contains a list of DistributionConfigurations
type DistributionConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DistributionConfiguration `json:"items"`
}

// Repository type metadata.
var (
	DistributionConfiguration_Kind             = "DistributionConfiguration"
	DistributionConfiguration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DistributionConfiguration_Kind}.String()
	DistributionConfiguration_KindAPIVersion   = DistributionConfiguration_Kind + "." + CRDGroupVersion.String()
	DistributionConfiguration_GroupVersionKind = CRDGroupVersion.WithKind(DistributionConfiguration_Kind)
)

func init() {
	SchemeBuilder.Register(&DistributionConfiguration{}, &DistributionConfigurationList{})
}
